service: ms-users

plugins:
  - serverless-offline
  - serverless-plugin-optimize

useDotenv: true

package:
  individually: true

provider:
  name: aws
  runtime: nodejs14.x
  environment:
    user_pool_id: { Ref: UserPool }
    client_id: { Ref: UserClient }
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource: '*'
        - Effect: Allow
          Action:
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
          Resource: '*'

functions:
  get-me-user:
    handler: dist/lambda.handler
    events:
      - http:
          method: GET
          path: users/me
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email
  list-users:
    handler: dist/lambda.handler
    events:
      - http:
          method: GET
          path: users/list
          cors: true
  create-user:
    handler: dist/lambda.handler
    events:
      - http:
          method: POST
          path: users/create
          cors: true
  update-user:
    handler: dist/lambda.handler
    events:
      - http:
          method: PATCH
          path: users/update
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email
  delete-user:
    handler: dist/lambda.handler
    events:
      - http:
          method: DELETE
          path: users/delete
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email
  confirm-account:
    handler: dist/lambda.handler
    events:
      - http:
          method: POST
          path: auth/account/confirm
          cors: true
  confirm-email:
    handler: dist/lambda.handler
    events:
      - http:
          method: POST
          path: auth/account/email/confirm
          cors: true
  account-password-confirm:
    handler: dist/lambda.handler
    events:
      - http:
          method: POST
          path: auth/account/password/confirm
          cors: true
  account-resend-code:
    handler: dist/lambda.handler
    events:
      - http:
          method: POST
          path: auth/account/resend/code
          cors: true
  account-forgot-password:
    handler: dist/lambda.handler
    events:
      - http:
          method: POST
          path: auth/account/forgot-password
          cors: true
  authentication-user:
    handler: dist/lambda.handler
    events:
      - http:
          method: POST
          path: auth/login
          cors: true
  logout-user:
    handler: dist/lambda.handler
    events:
      - http:
          method: POST
          path: auth/account/logout
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

  private:
    handler: dist/lambda.handler
    events:
      - http:
          path: /private
          method: GET
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: costumer-auth-pool
        Schema:
          - Name: email
            Required: true
            Mutable: true
          - Name: name
            Required: true
            Mutable: true
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireNumbers: true
            RequireLowercase: true
            RequireSymbols: true
            RequireUppercase: true
        AutoVerifiedAttributes:
          - email
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: verified_email
              Priority: 1

    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: costumer-auth-pool-client
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
